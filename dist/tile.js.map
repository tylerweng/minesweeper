{"version":3,"sources":["../tile.js"],"names":["DELTAS","Tile","board","pos","bombed","explored","flagged","adjacentTiles","filter","tile","length","map","adjacentPos","delta","isValidPos","push","getTile","adjacentBombCount","forEach","explore","toString","module","exports"],"mappings":";;;;;;AAAA,IAAMA,SAAS,CACX,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADW,EAEX,CAAC,CAAC,CAAF,EAAM,CAAN,CAFW,EAGX,CAAC,CAAC,CAAF,EAAM,CAAN,CAHW,EAIX,CAAE,CAAF,EAAK,CAAC,CAAN,CAJW,EAKX,CAAE,CAAF,EAAM,CAAN,CALW,EAMX,CAAE,CAAF,EAAK,CAAC,CAAN,CANW,EAOX,CAAE,CAAF,EAAM,CAAN,CAPW,EAQX,CAAE,CAAF,EAAM,CAAN,CARW,CAAf;;IAWMC,I;AAEF,kBAAYC,KAAZ,EAAmBC,GAAnB,EAAwB;AAAA;;AACpB,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,GAAL,GAAWA,GAAX;AACA,aAAKC,MAAL,GAAc,KAAd;AACA,aAAKC,QAAL,GAAgB,KAAhB;AACA,aAAKC,OAAL,GAAe,KAAf;AACH;;;;4CAEmB;AAChB,mBAAO,KAAKC,aAAL,GAAqBC,MAArB,CAA4B;AAAA,uBAAQC,KAAKL,MAAb;AAAA,aAA5B,EAAiDM,MAAxD;AACH;;;wCAEe;AAAA;;AACZ,gBAAMH,gBAAgB,EAAtB;AACAP,mBAAOW,GAAP,CAAW,iBAAS;AAChB,oBAAMC,cAAc,CAAC,MAAKT,GAAL,CAAS,CAAT,IAAcU,MAAM,CAAN,CAAf,EAAyB,MAAKV,GAAL,CAAS,CAAT,IAAcU,MAAM,CAAN,CAAvC,CAApB;AACA,oBAAI,MAAKX,KAAL,CAAWY,UAAX,CAAsBF,WAAtB,CAAJ,EAAwC;AACpCL,kCAAcQ,IAAd,CAAmB,MAAKb,KAAL,CAAWc,OAAX,CAAmBJ,WAAnB,CAAnB;AACH;AACJ,aALD;AAMA,mBAAOL,aAAP;AACH;;;kCAES;AACN,gBAAI,KAAKD,OAAL,IAAgB,KAAKD,QAAzB,EAAmC,OAAO,IAAP;AACnC,iBAAKA,QAAL,GAAgB,IAAhB;AACA,gBAAI,CAAC,KAAKD,MAAN,IAAgB,KAAKa,iBAAL,OAA6B,CAAjD,EAAoD;AAChD,qBAAKV,aAAL,GAAqBW,OAArB,CAA6B;AAAA,2BAAQT,KAAKU,OAAL,EAAR;AAAA,iBAA7B;AACH;AACD,mBAAO,IAAP;AACH;;;iCAEQ;AACL,gBAAI,KAAKb,OAAT,EAAkB;AACd,uBAAO,GAAP;AACH,aAFD,MAEO,IAAI,KAAKD,QAAT,EAAmB;AACtB,uBAAO,KAAKY,iBAAL,OAA6B,CAA7B,GAAiC,GAAjC,GAAuC,KAAKA,iBAAL,GAAyBG,QAAzB,EAA9C;AACH,aAFM,MAEA;AACH,uBAAO,GAAP;AACH;AACJ;;;iCAEQ;AACL,gBAAI,KAAKd,OAAT,EAAkB;AACd,uBAAO,KAAKF,MAAL,GAAc,GAAd,GAAoB,GAA3B;AACH,aAFD,MAEO,IAAI,KAAKA,MAAT,EAAiB;AACpB,uBAAO,KAAKC,QAAL,GAAgB,GAAhB,GAAsB,GAA7B;AACH,aAFM,MAEA;AACH,uBAAO,KAAKY,iBAAL,OAA6B,CAA7B,GAAiC,GAAjC,GAAuC,KAAKA,iBAAL,GAAyBG,QAAzB,EAA9C;AACH;AACJ;;;;;;AAILC,OAAOC,OAAP,GAAiBrB,IAAjB","file":"tile.js","sourcesContent":["const DELTAS = [\n    [-1, -1],\n    [-1,  0],\n    [-1,  1],\n    [ 0, -1],\n    [ 0,  1],\n    [ 1, -1],\n    [ 1,  0],\n    [ 1,  1]\n];\n\nclass Tile {\n\n    constructor(board, pos) {\n        this.board = board;\n        this.pos = pos;\n        this.bombed = false;\n        this.explored = false;\n        this.flagged = false;\n    }\n\n    adjacentBombCount() {\n        return this.adjacentTiles().filter(tile => tile.bombed).length;\n    }\n\n    adjacentTiles() {\n        const adjacentTiles = [];\n        DELTAS.map(delta => {\n            const adjacentPos = [this.pos[0] + delta[0], this.pos[1] + delta[1]];\n            if (this.board.isValidPos(adjacentPos)) {\n                adjacentTiles.push(this.board.getTile(adjacentPos));\n            }\n        });\n        return adjacentTiles;\n    }\n\n    explore() {\n        if (this.flagged || this.explored) return this;\n        this.explored = true;\n        if (!this.bombed && this.adjacentBombCount() === 0) {\n            this.adjacentTiles().forEach(tile => tile.explore());\n        }\n        return this;\n    }\n\n    render() {\n        if (this.flagged) {\n            return \"F\";\n        } else if (this.explored) {\n            return this.adjacentBombCount() === 0 ? \"_\" : this.adjacentBombCount().toString();\n        } else {\n            return \"*\";\n        }\n    }\n\n    reveal() {\n        if (this.flagged) {\n            return this.bombed ? \"F\" : \"f\";\n        } else if (this.bombed) {\n            return this.explored ? \"X\" : \"B\";\n        } else {\n            return this.adjacentBombCount() === 0 ? \"_\" : this.adjacentBombCount().toString();\n        }\n    }\n\n}\n\nmodule.exports = Tile;\n"]}