{"version":3,"sources":["../board.js"],"names":["Tile","require","Board","gridSize","numBombs","initializeGrid","grid","i","row","j","push","plantBombs","tile","getTile","Math","floor","random","bombed","pos","length","rowStr","render","console","log","reveal","reader","moveCallback","question","input","split","map","parseInt","el","completionCallback","promptMove","isValidPos","explore","run","module","exports"],"mappings":"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","file":"board.js","sourcesContent":["const Tile = require(\"./tile.js\");\n\nclass Board {\n    constructor(gridSize=9, numBombs=6) {\n        this.gridSize = gridSize;\n        this.numBombs = numBombs;\n\n        this.initializeGrid();\n    }\n\n    initializeGrid() {\n        this.grid = [];\n        for (let i = 0; i < this.gridSize; i++) {\n            const row = [];\n            for (let j = 0; j < this.gridSize; j++) {\n                row.push(new Tile(this, [i, j]));\n            }\n            this.grid.push(row);\n        }\n        this.plantBombs();\n    }\n\n    plantBombs() {\n        let numBombs = 0;\n        while (numBombs < this.numBombs) {\n            const tile = this.getTile([\n                Math.floor(Math.random() * this.gridSize),\n                Math.floor(Math.random() * this.gridSize)\n            ]);\n            if (!tile.bombed) {\n                tile.bombed = true;\n                numBombs++;\n            }\n        }\n    }\n\n    isValidPos(pos) {\n        for (let i = 0; i < pos.length; i++) {\n            if (pos[i] < 0 || pos[i] >= this.gridSize) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getTile(pos) {\n        return this.grid[pos[0]][pos[1]];\n    }\n\n    render() {\n        for (let i = 0; i < this.gridSize; i++) {\n            let rowStr = \"\";\n            for (let j = 0; j < this.gridSize; j++) {\n                const tile = this.getTile([i, j]);\n                rowStr += tile.render();\n            }\n            console.log(rowStr);\n        }\n    }\n\n    reveal() {\n        for (let i = 0; i < this.gridSize; i++) {\n            let rowStr = \"\";\n            for (let j = 0; j < this.gridSize; j++) {\n                const tile = this.getTile([i, j]);\n                rowStr += tile.reveal();\n            }\n            console.log(rowStr);\n        }\n    }\n\n    promptMove(reader, moveCallback) {\n        this.render();\n        reader.question(\"Enter rowNum,colNum: \" + \"\\n\", input => {\n            const pos = input.split(\",\").map(el => parseInt(el, 10));\n            moveCallback(pos);\n        });\n    }\n\n    run(reader, completionCallback) {\n        this.promptMove(reader, pos => {\n            if (!this.isValidPos(pos)) {\n                console.log(\"Invalid move!\");\n            }\n            const tile = this.getTile(pos);\n            if (tile.bombed) {\n                this.reveal();\n                console.log(\"Game over!\");\n            } else {\n                tile.explore();\n                return this.run(reader, completionCallback);\n            }\n        });\n    }\n}\n\nmodule.exports = Board;\n"]}